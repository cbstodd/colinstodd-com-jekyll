I"œQ<p>I‚Äôve been building a bunch of <a href="https://github.com/angular/angularfire2" target="_blank" rel="noopener">AngularFirestore2</a> apps recently (Loving it BTW), but I‚Äôve come to realize that I‚Äôm really just copying and pasting much of the functionality of my services and renaming the <code class="highlighter-rouge">Item.ts</code> types and Observable names. Anyway, I figured I‚Äôd post these common functions mainly for easy access (for myself), but I thought maybe you guys could find the code useful as well.</p>

<p>Who knows, maybe this becomes some sort of documentation cheat-sheet of some sort down the line.</p>

<p>For the sake of simplicity and reusability (you can do a find a replace to reuse) I‚Äôm going to call each ‚Äúobject‚Äù or ‚Äútype‚Äù an <strong><code class="highlighter-rouge">Item</code></strong>; so you should be able to use your favorite <a href="https://code.visualstudio.com/" target="_blank" rel="noopener" title="Visual Studio Code">text editor</a> or <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener" title="Webstorm">IDE</a> to update to whatever you need.</p>

<hr />

<h3 id="returns-a-observable-list-of-all-items-by-its-name-in-ascending-order">Returns a Observable list of all <code class="highlighter-rouge">Items</code> by its ‚Äú<code class="highlighter-rouge">name</code>‚Äù in ascending order:</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemService</span> <span class="p">{</span>

  <span class="nl">itemCollection</span><span class="p">:</span> <span class="nx">AngularFirestoreCollection</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nx">items$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Item</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">afs</span><span class="p">:</span> <span class="nx">AngularFirestore</span><span class="p">)</span> <span class="p">{}</span>

  <span class="nx">getAllitems</span><span class="p">():</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Item</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">itemCollection</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">collection</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">'</span><span class="s1">items</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">ref</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">orderBy</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">asc</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">items$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">itemCollection</span><span class="p">.</span><span class="nx">valueChanges</span><span class="p">();</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="returns-a-single-observable-item-from-its-id">Returns a single Observable <code class="highlighter-rouge">Item</code> from it‚Äôs <code class="highlighter-rouge">ID</code>:</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemService</span> <span class="p">{</span>

  <span class="nl">itemCollection</span><span class="p">:</span> <span class="nx">AngularFirestoreDocument</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="nx">item$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">afs</span><span class="p">:</span> <span class="nx">AngularFirestore</span><span class="p">)</span> <span class="p">{}</span>

  <span class="nx">getItem</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">itemDoc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">doc</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`items/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">item$</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">itemDoc</span><span class="p">.</span><span class="nx">snapshotChanges</span><span class="p">().</span><span class="nx">pipe</span><span class="p">(</span>
          <span class="nx">map</span><span class="p">((</span><span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">exists</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">data</span><span class="p">()</span> <span class="k">as</span> <span class="nx">Item</span><span class="p">;</span>
                  <span class="nx">data</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
                  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
              <span class="p">}</span>
          <span class="p">}));</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">item$</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="setssaves-item-data-from-a-reactive-form">Sets/Saves <code class="highlighter-rouge">Item</code> data (from a reactive form):</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemService</span> <span class="p">{</span>
  <span class="nl">uid</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">afs</span><span class="p">:</span> <span class="nx">AngularFirestore</span><span class="p">,</span> <span class="kr">private</span> <span class="nx">userService</span><span class="p">:</span> <span class="nx">UsersService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">uid</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">.</span><span class="nx">uid</span><span class="p">;</span>
  <span class="p">}</span>

    <span class="nx">saveItem</span><span class="p">(</span><span class="nx">formData</span><span class="p">:</span> <span class="nx">Item</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">currentDate</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span> <span class="c1">// Or: const currentDate = new Date(); If you want a Timestamp.</span>
        <span class="kd">const</span> <span class="nx">newId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">createId</span><span class="p">();</span>
        <span class="kd">const</span> <span class="na">itemRef</span><span class="p">:</span> <span class="nx">AngularFirestoreDocument</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">doc</span><span class="p">(</span><span class="s2">`items/</span><span class="p">${</span><span class="nx">newId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">formData</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">uid</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="na">data</span><span class="p">:</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">authorId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">uid</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">createdAt</span><span class="p">:</span> <span class="nx">currentDate</span><span class="p">,</span>
            <span class="na">description</span><span class="p">:</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">id</span><span class="p">:</span> <span class="nx">newId</span><span class="p">,</span>
            <span class="na">name</span><span class="p">:</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
            <span class="na">updatedAt</span><span class="p">:</span> <span class="nx">currentDate</span><span class="p">,</span>
        <span class="p">};</span>
      <span class="p">}</span>

        <span class="k">return</span> <span class="nx">itemRef</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// Set some sort of Success alert/action</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// Set some Error alert/action</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`myERROR: `</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="updatesmerge-item-data">Updates/Merge <code class="highlighter-rouge">Item</code> Data:</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemService</span> <span class="p">{</span>
  <span class="nl">uid</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">afs</span><span class="p">:</span> <span class="nx">AngularFirestore</span><span class="p">,</span> <span class="kr">private</span> <span class="nx">userService</span><span class="p">:</span> <span class="nx">UsersService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">uid</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">.</span><span class="nx">uid</span><span class="p">;</span>
  <span class="p">}</span>

    <span class="nx">updateItem</span><span class="p">(</span><span class="nx">formData</span><span class="p">:</span> <span class="nx">Item</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">newDate</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
        <span class="kd">const</span> <span class="na">questRef</span><span class="p">:</span> <span class="nx">AngularFirestoreDocument</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">doc</span><span class="p">(</span><span class="s2">`item/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uid</span> <span class="o">&amp;&amp;</span> <span class="nx">formData</span> <span class="o">&amp;&amp;</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="na">data</span><span class="p">:</span> <span class="nx">Item</span> <span class="o">=</span> <span class="p">{</span>
              <span class="na">authorId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">uid</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
              <span class="na">createdAt</span><span class="p">:</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">createdAt</span> <span class="o">||</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span>
              <span class="na">description</span><span class="p">:</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
              <span class="nx">id</span><span class="p">,</span>
              <span class="na">name</span><span class="p">:</span> <span class="nx">formData</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">''</span><span class="p">,</span>
              <span class="na">updatedAt</span><span class="p">:</span> <span class="nx">newDate</span><span class="p">,</span>
          <span class="p">};</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">questRef</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="p">{</span> <span class="na">merge</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// Set some sort of Success alert/action</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// Set some Error alert/action</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`myERROR: `</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
            <span class="p">});</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<h3 id="delete-an-item">Delete an <code class="highlighter-rouge">Item</code>:</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemService</span> <span class="p">{</span>

  <span class="nl">itemCollection</span><span class="p">:</span> <span class="nx">AngularFirestoreDocument</span><span class="o">&lt;</span><span class="nx">Item</span><span class="o">&gt;</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">afs</span><span class="p">:</span> <span class="nx">AngularFirestore</span><span class="p">)</span> <span class="p">{}</span>

  <span class="nx">deleteTag</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">itemDoc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">afs</span><span class="p">.</span><span class="nx">doc</span><span class="o">&lt;</span><span class="nx">Tag</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`items/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">itemDoc</span><span class="p">.</span><span class="k">delete</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// Do Something with Success</span>
          <span class="p">}))</span>
          <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`myERROR: `</span><span class="p">,</span> <span class="nx">error</span><span class="p">));</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>And with that you should have the general CRUD operations taken care of. I will try and add more complex situations when I find the time. If you find something wrong or missing please let me know in the comments.</p>
:ET